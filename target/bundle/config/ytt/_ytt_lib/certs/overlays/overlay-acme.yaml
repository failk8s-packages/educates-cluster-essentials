#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:assert", "assert")
#@ load("functions.star", "get_domains")

#@ if data.values.certProvider=="acme-aws":

#@ (hasEmail, _) = assert.try_to(lambda: len(data.values.aws.certs.email) > 0)
#@ (hasAwsCredsAccessKey, _) = assert.try_to(lambda: len(data.values.aws.credentials.accessKey) > 0)
#@ (hasAwsCredsSecretKey, _) = assert.try_to(lambda: len(data.values.aws.credentials.secretKey) > 0)
#@ if (hasAwsCredsSecretKey and not hasAwsCredsAccessKey) or (not hasAwsCredsSecretKey and hasAwsCredsAccessKey):
#@   assert.fail("`aws.credentials.accessKey` and `aws.credentials.secretKey` must both be provided")
#@ end

#@ if hasAwsCredsAccessKey and hasAwsCredsSecretKey:
---
apiVersion: v1
kind: Secret
metadata:
  name: cert-manager-aws-values
  namespace: #@ data.values.certmanager.namespace
type: Opaque
data:
  awsAccessKeyID: #@ base64.encode("{}".format(data.values.aws.credentials.accessKey))
  awsSecretAccessKey: #@ base64.encode("{}".format(data.values.aws.credentials.secretKey))
#@ end

#@overlay/match by=overlay.subset({"kind":"ClusterIssuer", "metadata": {"name": "wildcard"}})
---
spec:
  #@overlay/remove
  selfSigned:
  #@overlay/match missing_ok=True
  acme:
    #@ if/end hasEmail:
    email: #@ data.values.aws.certs.email
    privateKeySecretRef:
      name: eduk8s-wildcard-acme
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
      #@overlay/match by=lambda i,l,r: "dns01" in l
      - dns01:
          route53:
            region: #@ data.values.aws.certs.region
            #@ if hasAwsCredsAccessKey and hasAwsCredsSecretKey:
            accessKeyID: #@ data.values.aws.credentials.accessKey
            secretAccessKeySecretRef:
              name: cert-manager-aws-values
              key: awsSecretAccessKey
            #@ end
      #@overlay/match by=lambda i,l,r: "http01" in l
      - http01:
          ingress:
            class: #@ data.values.ingress.ingressClass

#@overlay/match by=overlay.subset({"kind":"Certificate", "metadata": {"name": "wildcard"}})
---
metadata:
  #@overlay/match missing_ok=True
  namespace: #@ data.values.ingress.namespace
spec:
  #@overlay/replace
  dnsNames: #@ get_domains()

#@ end
