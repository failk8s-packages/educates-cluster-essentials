#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")
#@ load("global.lib.yaml", "copy_all_educates_values")

#@ def aws():
#@     (hasIrsaRoleCertManager, _) = assert.try_to(lambda: len(data.values["clusterInfrastructure"]["aws"]["irsaRole"]["cert-manager"]) > 0)
#@     (hasIrsaRoleExternalDns, _) = assert.try_to(lambda: len(data.values["clusterInfrastructure"]["aws"]["irsaRole"]["external-dns"]) > 0)
#@     (hasAwsId, _) = assert.try_to(lambda: len(data.values.clusterInfrastructure.aws.awsId) > 0)
#@     (hasClusterName, _) = assert.try_to(lambda: len(data.values.clusterInfrastructure.aws.clusterName) > 0)

#@   if hasIrsaRoleCertManager:
#@     certManagerIrsaRole = data.values["clusterInfrastructure"]["aws"]["irsaRole"]["cert-manager"]
#@   elif (hasAwsId and hasClusterName):
#@     certManagerIrsaRole = "arn:aws:iam::{}:role/svc.bot.route53.cert-manager-{}".format(data.values.clusterInfrastructure.aws.awsId, data.values.clusterInfrastructure.aws.clusterName)
#@   else:
#@     fail("cert-manager is enabled and can not be configured. Missing irsaRole or awsId/clusterName")
#@   end

#@   if hasIrsaRoleExternalDns:
#@     externalDnsIrsaRole = data.values["clusterInfrastructure"]["aws"]["irsaRole"]["external-dns"]
#@   elif (hasAwsId and hasClusterName):
#@     externalDnsIrsaRole = "arn:aws:iam::{}:role/svc.bot.route53.external-dns-{}".format(data.values.clusterInfrastructure.aws.awsId, data.values.clusterInfrastructure.aws.clusterName)
#@   else:
#@     fail("external-dns is enabled and can not be configured. Missing irsaRole or awsId/clusterName")
#@   end

clusterPackages:
  cert-manager:
    enabled: true
    settings:
      #!      infraProvider: aws
      serviceaccount:
        annotations:
          eks.amazonaws.com/role-arn: #@ certManagerIrsaRole
      #! leaderElectionNamespace: cert-manager
  contour:
    enabled: true
    settings:
      infraProvider: aws
      service:
        type: LoadBalancer
      externaldns:
        domains:
          -  #@ data.values.clusterIngress.domain
  external-dns:
    enabled: true
    settings:
      infraProvider: aws
      serviceaccount:
        annotations:
          eks.amazonaws.com/role-arn: #@ externalDnsIrsaRole
      #!      deployment:
      #!        securityContext:
      #!          runAsNonRoot: false
      aws:
        args:
          domain_filter: #@ data.values.clusterIngress.domain
          txt_owner_id: "educates"
  certs:
    enabled: true
    settings:
      certProvider: acme-aws
      domains:
        -  #@ data.values.clusterIngress.domain
      aws:
        certs:
          region: #@ data.values.clusterInfrastructure.aws.region
  kyverno:
    enabled: true
    settings: {}
  metacontroller:
    enabled: false
    settings: {}
  educates:
    enabled: true
    settings: #@ copy_all_educates_values()
#@ end

#@ def eks():
#@   return aws()
#@ end
